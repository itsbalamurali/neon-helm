
apiVersion: v1
kind: ConfigMap
metadata:
  name: pageserver-config
data:
  pageserver.toml: |
    # Initial configuration file created by 'pageserver --init'
    id = '0'
    listen_pg_addr = '0.0.0.0:6400'
    listen_http_addr = '0.0.0.0:9898'

    #wait_lsn_timeout = '{DEFAULT_WAIT_LSN_TIMEOUT}'
    #wal_redo_timeout = '{DEFAULT_WAL_REDO_TIMEOUT}'

    #max_file_descriptors = {DEFAULT_MAX_FILE_DESCRIPTORS}

    # initial superuser role name to use when creating a new tenant
    #initial_superuser_name = '{DEFAULT_SUPERUSER}'

    #broker_endpoint = '{BROKER_DEFAULT_ENDPOINT}'

    #log_format = '{DEFAULT_LOG_FORMAT}'

    #concurrent_tenant_size_logical_size_queries = '{DEFAULT_CONCURRENT_TENANT_SIZE_LOGICAL_SIZE_QUERIES}'

    #metric_collection_interval = '{DEFAULT_METRIC_COLLECTION_INTERVAL}'
    #cached_metric_collection_interval = '{DEFAULT_CACHED_METRIC_COLLECTION_INTERVAL}'
    #synthetic_size_calculation_interval = '{DEFAULT_SYNTHETIC_SIZE_CALCULATION_INTERVAL}'

    #disk_usage_based_eviction = \{\{ max_usage_pct = .., min_avail_bytes = .., period = "10s"\}\}

    #background_task_maximum_delay = '{DEFAULT_BACKGROUND_TASK_MAXIMUM_DELAY}'

    [tenant_config]
    #checkpoint_distance = {DEFAULT_CHECKPOINT_DISTANCE} # in bytes
    #checkpoint_timeout = {DEFAULT_CHECKPOINT_TIMEOUT}
    #compaction_target_size = {DEFAULT_COMPACTION_TARGET_SIZE} # in bytes
    #compaction_period = '{DEFAULT_COMPACTION_PERIOD}'
    #compaction_threshold = {DEFAULT_COMPACTION_THRESHOLD}

    #gc_period = '{DEFAULT_GC_PERIOD}'
    #gc_horizon = {DEFAULT_GC_HORIZON}
    #image_creation_threshold = {DEFAULT_IMAGE_CREATION_THRESHOLD}
    #pitr_interval = '{DEFAULT_PITR_INTERVAL}'

    #min_resident_size_override = .. # in bytes
    #evictions_low_residence_duration_metric_threshold = '{DEFAULT_EVICTIONS_LOW_RESIDENCE_DURATION_METRIC_THRESHOLD}'
    #gc_feedback = false

    [remote_storage]
    endpoint='http://minio:9000'
    bucket_name='neon'
    bucket_region='eu-north-1'
    prefix_in_bucket='/pageserver/'

    broker_endpoint = "$$BROKER_ENDPOINT"
    #db_path = "/data/.neon/"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pageserver
  labels:
    {{- include "neon.labels" . | nindent 4 }}
    app: pageserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pageserver
  template:
    metadata:
      labels:
        app: pageserver
    spec:
      initContainers:
      #TODO: only init if config is not present.
      - name: pageserver-init
        image: {{ .Values.pageserver.image.repository }}:{{ .Values.pageserver.image.tag }
        command: ["pageserver",
         "--init",
          "-D", "/data/.neon/",
          "-c","id=0","-c","broker_endpoint='http://storage-broker.{{.Release.Namespace}}.svc.cluster.local:50051'",]
        volumeMounts:
        - mountPath: "/data/.neon/"
          name: pageserver-data-volume
      containers:
      - name: pageserver
        image: neondatabase/neon:latest
        ports:
        - containerPort: 9898
        - containerPort: 6400
        command: ["pageserver", "-D", "/data/.neon/", "-c","id=0","-c","broker_endpoint='http://storage-broker.{{.Release.Namespace}}.svc.cluster.local:50051'"]
        volumeMounts:
        # - name: pageserver-config-volume
        #   mountPath: "/data/.neon/pageserver.toml"
        #   subPath: pageserver.toml
        - mountPath: "/data/.neon/"
          name: pageserver-data-volume
      volumes:
      - name: pageserver-config-volume
        configMap:
          name: pageserver-config
          items:
          - key: pageserver.toml
            path: pageserver.toml
      - name: pageserver-data-volume
        persistentVolumeClaim:
          claimName: pageserver-data-claim
---
apiVersion: v1
kind: Service
metadata:
  name: pageserver
spec:
  selector:
    app: pageserver
  ports:
    - name: http
      port: 9898
      targetPort: 9898
    - name: pg
      port: 6400
      targetPort: 6400
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pageserver-data-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/data/.neon/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pageserver-data-claim
spec:
  storageClassName: "hostpath" #TODO: Add storage class later
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
